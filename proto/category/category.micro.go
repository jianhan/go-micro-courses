// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/category/category.proto

/*
Package category is a generated protocol buffer package.

It is generated from these files:
	proto/category/category.proto

It has these top-level messages:
	Category
	UpsertCategoryReq
	UpsertCategoryRsp
	Categories
	InsertCategoriesResponse
	UpdateCategoriesResponse
	FindCategoriesRequest
	DeleteCategoriesByIDsRequest
*/
package category

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = google_protobuf1.Empty{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CategoryService service

type CategoryServiceClient interface {
	UpsertCategory(ctx context.Context, in *UpsertCategoryReq, opts ...client.CallOption) (*UpsertCategoryRsp, error)
	InsertCategories(ctx context.Context, in *Categories, opts ...client.CallOption) (*InsertCategoriesResponse, error)
	UpdateCategories(ctx context.Context, in *Categories, opts ...client.CallOption) (*UpdateCategoriesResponse, error)
	FindCategories(ctx context.Context, in *FindCategoriesRequest, opts ...client.CallOption) (*Categories, error)
	DeleteCategoriesByIDs(ctx context.Context, in *DeleteCategoriesByIDsRequest, opts ...client.CallOption) (*google_protobuf1.Empty, error)
}

type categoryServiceClient struct {
	c           client.Client
	serviceName string
}

func NewCategoryServiceClient(serviceName string, c client.Client) CategoryServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.courses"
	}
	return &categoryServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *categoryServiceClient) UpsertCategory(ctx context.Context, in *UpsertCategoryReq, opts ...client.CallOption) (*UpsertCategoryRsp, error) {
	req := c.c.NewRequest(c.serviceName, "CategoryService.UpsertCategory", in)
	out := new(UpsertCategoryRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) InsertCategories(ctx context.Context, in *Categories, opts ...client.CallOption) (*InsertCategoriesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "CategoryService.InsertCategories", in)
	out := new(InsertCategoriesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) UpdateCategories(ctx context.Context, in *Categories, opts ...client.CallOption) (*UpdateCategoriesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "CategoryService.UpdateCategories", in)
	out := new(UpdateCategoriesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) FindCategories(ctx context.Context, in *FindCategoriesRequest, opts ...client.CallOption) (*Categories, error) {
	req := c.c.NewRequest(c.serviceName, "CategoryService.FindCategories", in)
	out := new(Categories)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryServiceClient) DeleteCategoriesByIDs(ctx context.Context, in *DeleteCategoriesByIDsRequest, opts ...client.CallOption) (*google_protobuf1.Empty, error) {
	req := c.c.NewRequest(c.serviceName, "CategoryService.DeleteCategoriesByIDs", in)
	out := new(google_protobuf1.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CategoryService service

type CategoryServiceHandler interface {
	UpsertCategory(context.Context, *UpsertCategoryReq, *UpsertCategoryRsp) error
	InsertCategories(context.Context, *Categories, *InsertCategoriesResponse) error
	UpdateCategories(context.Context, *Categories, *UpdateCategoriesResponse) error
	FindCategories(context.Context, *FindCategoriesRequest, *Categories) error
	DeleteCategoriesByIDs(context.Context, *DeleteCategoriesByIDsRequest, *google_protobuf1.Empty) error
}

func RegisterCategoryServiceHandler(s server.Server, hdlr CategoryServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&CategoryService{hdlr}, opts...))
}

type CategoryService struct {
	CategoryServiceHandler
}

func (h *CategoryService) UpsertCategory(ctx context.Context, in *UpsertCategoryReq, out *UpsertCategoryRsp) error {
	return h.CategoryServiceHandler.UpsertCategory(ctx, in, out)
}

func (h *CategoryService) InsertCategories(ctx context.Context, in *Categories, out *InsertCategoriesResponse) error {
	return h.CategoryServiceHandler.InsertCategories(ctx, in, out)
}

func (h *CategoryService) UpdateCategories(ctx context.Context, in *Categories, out *UpdateCategoriesResponse) error {
	return h.CategoryServiceHandler.UpdateCategories(ctx, in, out)
}

func (h *CategoryService) FindCategories(ctx context.Context, in *FindCategoriesRequest, out *Categories) error {
	return h.CategoryServiceHandler.FindCategories(ctx, in, out)
}

func (h *CategoryService) DeleteCategoriesByIDs(ctx context.Context, in *DeleteCategoriesByIDsRequest, out *google_protobuf1.Empty) error {
	return h.CategoryServiceHandler.DeleteCategoriesByIDs(ctx, in, out)
}
